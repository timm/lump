# vim:ft=sh:
Lump=$(cd $( dirname "${BASH_SOURCE[0]}" ) && pwd )

tput bold; tput setaf 2
cat <<'EOF'
   .-.
  (o o)  (lithp
  ( O )    (ith
   \   \     lithening))
    `~~~'
EOF
tput sgr0

alias gg="git pull"   
alias gp="git add *; git commit -am saving; git push; git status"
alias gs="git status"   
alias ls="ls -G"
alias reload=". $Lump/.lump"
alias tmux="tmux -f $Lump/.var/tmuxrc"
alias vi="vim    -u $Lump/.var/vimrc"

ook()  { sbcl --script  ok${1}.lisp; }
scl()  { sbcl --script $1.lisp;  }
ccl()  { clisp $1.lisp;  }
here() { cd $1; basename `pwd`; }    
vims() { vim -u $Lump/.var/vimrc +PluginInstall +qall; }

for i in *.lisp; do
  f=$(basename $i .lisp)
  com="alias $f='sbcl --script $i'"
  tput bold; tput setaf 0
  echo "# defining $com"
  tput sgr0
  eval  $com
done

PROMPT_COMMAND='echo -ne "💫 $(git branch 2>/dev/null | grep '^*' | colrm 1 2):";PS1="$(here ..)/$(here .):\!\e[m ▶ "'     

doco() {
  doco1 > README.md
  about >> README.md
  clisp readmes.lisp --makedoc >> README.md
  git add README.md
}

about() { cat<<'EOF'


Here are all my data mining LISP tricks.

## Install

<img align=right src="http://www.lisperati.com/lisplogo_fancy_256.png">
Install Common Lisp; e.g.:

- Clisp: good for simple scripts and succinct debug information;
- Sbcl: good for speed and verbose debig information

Download [the code](https://github.com/timm/lump/archive/master.zip) and unzip
it.

Test all the `yes_*.lisp` files, looking for failure cases e.g.

    for f in yes_*.lisp; do 
      sbcl --script $f
    done | grep FAIL

## About this code

The file `README.md` is auto-generated from docstrings in the code
(so  do
not edit it manually).

Each file knows its own dependancies (so every file can be tested independently)

- The `yes_*` files are demos/test of everything else (so to understand this
  code, read the `yes_*` files).
- All the other files load code without
  triggering  side-effects (so that code can be loaded as sub-routnines in other
   packages).

All the classes inherits from a  CLOS [thing](oo.lisp) class which:

- Assigns a unique integer `id` to each instance
- Knows how to pretty-print itself (while hiding secret slots; i.e. those starting with 
  the underscore character `_`).

For BASH users, s set of useful shell commands are loaded using 

    . .lump

This code:

- Creates some useful functions; e.g.
  - `doco` :  regenerates `README.md`
- Creates some useful short-cut alias; e.g.
  - `gp` = commit all files, push them back to the web (via git)
  - `reload` = reload `.lump` (usful if you edit that file and want to access the updated
    functionality).
- Ensures that `.gitignore`, `.travis.yml`, `.var/vimrc` `.var/.tumuxrc` exists
- Ensures that `vi` will use `.var/bashrc`  and `tmux` will use `.var/tmuxrc`

EOF
}

doco1() { cat<<'EOF'
<a name=top></a>
'([home](https://github.com/timm/lump/blob/master/README.md#top) 
([&copy;2020](https://github.com/timm/lump/blob/master/LICENSE.md) 
(["Tim Menzies"](http://menzies.us))))
<img width=1 height=25 src="https://github.com/timm/lump/blob/master/etc/img/FFFFFF.png">
<a href="https://github.com/timm/lump/blob/master/README.md#top">
<img src="https://raw.githubusercontent.com/timm/lump/master/etc/img/banner.png" ></a><br>
'(:site ([src](http://github.com/timm/lisp) 
([contrib](https://github.com/timm/lump/blob/master/READEME.md#contribute)
([discuss](https://github.com/timm/lump/issues))))      
&nbsp;&nbsp;:code ([lib](https://github.com/timm/lump/tree/master/src/lib/README.md#top)
([oo](https://github.com/timm/lump/tree/master/src/oo/README.md#top)
([sample](https://github.com/timm/lump/tree/master/src/sample/README.md#top)))))

<p align=center>
<img src="https://img.shields.io/badge/purpose-ai%20,%20se-blueviolet"> <a 
href="https://github.com/timm/lump/blob/master/LICENSE.md"> <img  
   alt="License" src="https://img.shields.io/badge/license-mit-red"></a> <a 
  href="https://zenodo.org/badge/latestdoi/289524083"> <img 
  src="https://zenodo.org/badge/289524083.svg" alt="DOI"></a> <img 
alt="Platform" src="https://img.shields.io/badge/platform-osx%20,%20linux-lightgrey"> <img 
alt="lisp" src="https://img.shields.io/badge/language-sbcl,clisp-blue"> <a 
 href="https://travis-ci.org/github/timm/lump"><img alt="tests" 
   src="https://travis-ci.org/timm/lump.svg?branch=master"></a>
</p>
EOF
}
want=$Lump/.travis.yml
[ -f "$want" ] || cat<<'EOF'>$want
language: common-lisp
sudo: required

env:
  matrix:
    - LISP=sbcl
    - LISP=clisp

install:
  # Install cl-travis
  - curl https://raw.githubusercontent.com/luismbo/cl-travis/master/install.sh | bash

script:
  - sbcl --script yes_my.lisp

notifications:
  email:
    - timm@ieee.org
EOF

Var=$Lump/.var
mkdir -p $Var
 
want=$Var/vimrc;
[ -f "$want" ] || cat<<'EOF'>$want
set list
set listchars=tab:>-
set backupdir-=.
set backupdir^=~/tmp,/tmp
set nocompatible
"filetype plugin indent on
set modelines=3
set scrolloff=3
set autoindent
set hidden "remember ls
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set backspace=indent,eol,start
set laststatus=2
set splitbelow
set paste
set mouse=a
set title
set number
set relativenumber
autocmd BufEnter * cd %:p:h
set showmatch
set matchtime=15
set background=light
set syntax=on
syntax enable
set ignorecase
set incsearch
set smartcase
set showmatch
set hlsearch
set nofoldenable    " disable folding
set ruler
set laststatus=2
set statusline=
set statusline+=%F
set statusline+=\ 
set statusline+=%m
set statusline+=%=
set statusline+=%y
set statusline+=\ 
set statusline+=%c
set statusline+=:
set statusline+=%l
set statusline+=\ 
set lispwords+=defthing
set lispwords+=doitems
set lispwords+=dohash
set lispwords+=labels
set lispwords+=while
set lispwords+=until
set path+=../**
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end
colorscheme default
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
map Z 1z=
set spell spelllang=en_us
set spellsuggest=fast,20 "Don't show too much suggestion for spell check
nn <F7> :setlocal spell! spell?<CR>
let g:vim_markdown_fenced_languages = ['awk=awk']
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'tbastos/vim-lua'
Plugin 'airblade/vim-gitgutter'
"Plugin 'itchyny/lightline.vim'
Plugin 'junegunn/fzf'
"  Plugin 'humiaozuzu/tabbar'
"  Plugin 'drmingdrmer/vim-tabbar'
Plugin 'tomtom/tcomment_vim'
Plugin 'ap/vim-buftabline'
Plugin 'junegunn/fzf.vim'
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
Plugin 'nvie/vim-flake8'
Plugin 'seebi/dircolors-solarized'
Plugin 'nequo/vim-allomancer'
Plugin 'nanotech/jellybeans.vim'
Plugin 'tell-k/vim-autopep8'
Plugin 'vimwiki/vimwiki'
Plugin 'kchmck/vim-coffee-script'
Plugin 'tpope/vim-markdown'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
let g:autopep8_indent_size=2
let g:autopep8_max_line_length=70
let g:autopep8_on_save = 1
let g:autopep8_disable_show_diff=1
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>
colorscheme jellybeans
map <C-o> :NERDTreeToggle<CR>
nnoremap <Leader><space> :noh<cr>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
set titlestring=%{expand(\"%:p:h\")}
hi Normal guibg=NONE ctermbg=NONE
hi NonText guibg=NONE ctermbg=NONE
        set fillchars=vert:\|
hi VertSplit cterm=NONE
set ts=2
set sw=2
set sts=2
 set et
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
set hidden
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>
set formatoptions-=t
set nowrap
" Markdown
let g:markdown_fenced_languages = ['awk','py=python']
EOF

if [ ! -d "$HOME/.vim/bundle" ]; then
   git clone https://github.com/VundleVim/Vundle.vim.git \
         ~/.vim/bundle/Vundle.vim
   vims
fi

want=$Lump/.gitignore
[ -f "$want" ] || cat<<'EOF'>$want
.var
## VIM ###

# Swap
[._]*.s[a-v][a-z]
!*.svg  # comment out if you don't need vector files
[._]*.sw[a-p]
[._]s[a-rt-v][a-z]
[._]ss[a-gi-z]
[._]sw[a-p]

# Session
Session.vim
Sessionx.vim

# Temporary
.netrwhist
*~
# Auto-generated tag files
tags
# Persistent undo
[._]*.un~

### Macos ###

# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk
EOF

want=$Var/tmuxrc
[ -f "$want" ] ||  cat<<'EOF'> $want
set -g aggressive-resize on
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix
set -g base-index 1
# start with pane 1
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %
# open new windows in the current path
bind c new-window -c "#{pane_current_path}"
# reload config file
bind r source-file $Tnix/.config/dottmux
unbind p
bind p previous-window
# shorten command delay
set -sg escape-time 1
# don't rename windows automatically
set-option -g allow-rename off
# mouse control (clickable windows, panes, resizable panes)
set -g mouse on
# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
# enable vi mode keys
set-window-option -g mode-keys vi
# set default terminal mode to 256 colors
set -g default-terminal "screen-256color"
bind-key u capture-pane \;\
    save-buffer /tmp/tmux-buffer \;\
    split-window -l 10 "urlview /tmp/tmux-buffer"
bind P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none
#  modes
setw -g clock-mode-colour colour5
# panes
# statusbar
set -g status-position top
set -g status-justify left
set -g status-bg colour232
set -g status-fg colour137
###set -g status-attr dim
set -g status-left ''
set -g status-right '#{?window_zoomed_flag,🔍,} #[fg=colour255,bold]#H #[fg=colour255,bg=colour19,bold] %b %d #[fg=colour255,bg=colour8,bold] %H:%M '
set -g status-right '#{?window_zoomed_flag,🔍,} #[fg=colour255,bold]#H '
set -g status-right-length 50
set -g status-left-length 20
setw -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour249]#F '
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
# messages
# layouts
bind S source-file $Tnix/.config/tmux-session1
setw -g monitor-activity on
set -g visual-activity on
EOF
 
